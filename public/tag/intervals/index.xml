<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intervals | Thomas A. Püschel</title>
    <link>/tag/intervals/</link>
      <atom:link href="/tag/intervals/index.xml" rel="self" type="application/rss+xml" />
    <description>Intervals</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 26 Apr 2020 21:13:14 -0500</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Intervals</title>
      <link>/tag/intervals/</link>
    </image>
    
    <item>
      <title>Intervals&#39; method tutorial</title>
      <link>/post/tutorial_intervals/</link>
      <pubDate>Sun, 26 Apr 2020 21:13:14 -0500</pubDate>
      <guid>/post/tutorial_intervals/</guid>
      <description>


&lt;div id=&#34;tutorial-how-to-use-r-to-analyse-data-from-fea-using-the-intervals-method&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tutorial: How to use R to analyse data from FEA using the intervals’ method&lt;/h2&gt;
&lt;p&gt;We have developed a new method, named the intervals’ method, to analyse data from finite element models in a comparative multivariate framework.The intervals’ method consists of generating a set of variables, each one defined by an interval of stress values. Each variable is expressed as a percentage of the area of the model occupied by those stress values. Afterwards these newly generated variables can be analysed using multivariate methods. As a case study, several armadillo mandibles are analysed, showing that the proposed method is useful to distinguish and characterise biomechanical differences related to diet/ecomorphology:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ca. unicinctus&lt;/em&gt;: Specialist insectivore&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ch. truncatus&lt;/em&gt;: Generalist insectivore-fossorial&lt;/p&gt;
&lt;p&gt;&lt;em&gt;D. novemcinctus&lt;/em&gt;: Generalist insectivore&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ca. tatouay&lt;/em&gt;: Generalist insectivore-fossorial&lt;/p&gt;
&lt;p&gt;Below you will find all the necessary steps to obtain the desired number of interval variables and to carry out a PCA using them. In the provided example, four armadillo mandibles will be analysed which correspond to some of the individuals that were analysed in the paper where the Intervals’ method was introduced for the first time.&lt;/p&gt;
&lt;p&gt;When using this method, please cite the following reference: Marcé-Nogué, J., De Esteban-Trivigno, S., Püschel, T.A., Fortuny, J., 2017. The intervals method: a new approach to analyse finite element outputs using multivariate statistics. PeerJ 5, e3793. &lt;a href=&#34;https://doi.org/10.7717/peerj.3793&#34; class=&#34;uri&#34;&gt;https://doi.org/10.7717/peerj.3793&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The R scripts and data files to run the method outlined below can be download from &lt;a href=&#34;https://figshare.com/articles/intervals-method-files_rar/12025866&#34; class=&#34;uri&#34;&gt;https://figshare.com/articles/intervals-method-files_rar/12025866&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Set the input parameters for the method (these values are defined by the user):
Fixed Upper Threshold FTupper&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FTupper = 0.1;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Number of intervals: NIntervals&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NIntervals = 25;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Read the data.
The data must be stored as .csv files in the same folder of the script
Each .csv file must contain three rows with: a) the number of the element, b) area/volume of the element and c) von mises stress, respectively.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;file.name = list.files(pattern=&amp;quot;*.csv&amp;quot;)
NFiles = length(file.name)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create the matrix of intervals
Each row with the area percentage for each interval and each file of the matrix
with the different models included&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data.intervals = matrix(file.name,ncol = NIntervals, nrow = NFiles)

for (f in 1:NFiles) {

  data.values = data.matrix(read.csv(file.name[f], header = TRUE, sep = &amp;quot;,&amp;quot;));

  # Get the number of mesh elements of the model

  NElements = nrow(data.values);

  # Create the internal matrix to store the intervals and other data

  Counter.matrix = matrix(0,ncol = NIntervals, nrow = 5);

  # Compute the range values for each interval (Tlower and Tupper)

  Range.values = seq(0, FTupper, by=FTupper/(NIntervals-1));

  # Start the Loop

  for (i in 1:NElements) {
    for (j in 1:NIntervals) {
      if (j == 1){
        if (data.values[i,3] &amp;lt;= Range.values[j+1]) 
          {
          Counter.matrix[2,j]=Counter.matrix[2,j]+1;
          Counter.matrix[4,j]=Counter.matrix[4,j]+data.values[i,2];
          }
      }
      else if (j &amp;gt; 1 &amp;amp; j &amp;lt; NIntervals){
        if (data.values[i,3] &amp;gt; Range.values[j] &amp;amp; data.values[i,3] &amp;lt;= Range.values[j+1]) 
        {
        Counter.matrix[2,j]=Counter.matrix[2,j]+1;
        Counter.matrix[4,j]=Counter.matrix[4,j]+data.values[i,2];
        }   
      }
      else if (j == NIntervals){
        if (data.values[i,3] &amp;gt; Range.values[j]) 
        {
        Counter.matrix[2,j]=Counter.matrix[2,j]+1;
        Counter.matrix[4,j]=Counter.matrix[4,j]+data.values[i,2];
        }
      }
    }
  }
  
  # End the loop

  # Compute the percentage in each interval with respect  to the total area

  for (i in 1:NIntervals) {
    Counter.matrix[1,i]=Range.values[i];
    Counter.matrix[3,i]=100*Counter.matrix[2,i]/NElements;
    Counter.matrix[5,i]=100*Counter.matrix[4,i]/sum(data.values[,2]);
  }

  # Store the vector of intervals for the model f in the matrix of intervals

  data.intervals[f,]=Counter.matrix[5,];

}

data.intervals=as.data.frame(data.intervals);
row.names(data.intervals)=file.name;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Save data and remove variables&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(data.intervals,&amp;#39;matrix-of-intervals.csv&amp;#39;);
rm(NIntervals, FTupper, NElements, i, j, f, file.name, NFiles, Range.values, Counter.matrix, data.values)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following steps are necessary to carry the PCA with the newly generated variables&lt;/p&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;install the following packages if required&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;#39;factoextra&amp;#39;)) devtools::install_github(&amp;quot;kassambara/factoextra&amp;quot;); library(&amp;#39;factoextra&amp;#39;)
## Loading required package: factoextra
## Loading required package: ggplot2
## Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa
if (!require(&amp;#39;ggpubr&amp;#39;)) devtools::install_github(&amp;quot;kassambara/ggpubr&amp;quot;); library(&amp;#39;ggpubr&amp;#39;)
## Loading required package: ggpubr
if (!require(&amp;#39;FactoMineR&amp;#39;)) install.packages(&amp;#39;FactoMiner&amp;#39;); library(&amp;#39;FactoMineR&amp;#39;)
## Loading required package: FactoMineR&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;read the intervals&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stress.distrib = read.csv(&amp;quot;matrix-of-intervals.csv&amp;quot;, row.names=1, header = TRUE, sep = &amp;quot;,&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;compute PCA&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;col.number = ncol(stress.distrib)
PCA.stress &amp;lt;- PCA(stress.distrib[,1:col.number],  graph = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;8&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Define the parameters and generate the biplot&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# colors by group
group.colors = row.names(stress.distrib)

#colors by variable
interval.number = nrow(PCA.stress$var$coord)
interval.vector = seq(from = 1, to = interval.number, by=1 )
interval.colors = interval.vector
interval.palette = c(&amp;quot;blue&amp;quot;,&amp;quot;cyan&amp;quot;,&amp;quot;green&amp;quot;,&amp;quot;chartreuse&amp;quot;,&amp;quot;yellow&amp;quot;,&amp;quot;gold&amp;quot;,&amp;quot;orange&amp;quot;,&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;9&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Biplot: variables coloured by contribution to PCs&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fviz_pca_biplot(PCA.stress, 
                mean.point=F,                     # 
                axes.linetype = &amp;quot;solid&amp;quot;,
                
                # Fill individuals by groups
                geom.ind=c(&amp;quot;point&amp;quot;, &amp;quot;text&amp;quot;),
                pointshape = 21, 
                pointsize = 5,            
                col.ind= &amp;quot;black&amp;quot;,                 # 
                fill.ind = group.colors,          # 
                alpha.ind = 1,                    # 
                
                # Color variable by intervals
                geom.var = &amp;quot;arrow&amp;quot;,
                col.var = interval.colors,
                arrowsize = 0.5,
                
                repel = TRUE) +                   # Avoid label overplotting
  
  
  #fill_palette(group.palette) +
  gradient_color(interval.palette)+
  labs(x = &amp;quot;PC1&amp;quot;, y = &amp;quot;PC2&amp;quot;)+
  
  
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/tutorial_intervals_files/figure-html/Intervals%20PCA-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
